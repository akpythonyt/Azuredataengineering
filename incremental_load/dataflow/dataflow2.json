{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "costfactsource",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink5"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split2"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          ACTIVITY_ID as string,",
				"          AMT_CTRL_AREA as string,",
				"          AMT_FIXED_CTRL_AREA as string,",
				"          AMT_FIXVAR_CTRL_AREA as string,",
				"          AMT_OBJ as string,",
				"          AMT_TRX as string,",
				"          ACTUAL_VALUE_CO_CURR as string,",
				"          PLAN_VALUE_CO_CURR as string,",
				"          ACTUAL_VALUE_TXN_CURR as string,",
				"          PLAN_VALUE_TXN_CURR as string,",
				"          AMT_VAR_CTRL_AREA as string,",
				"          QTY as string,",
				"          QTY_FIXED as string,",
				"          DEB_CRED_IND as string,",
				"          BUS_AREA_ID as string,",
				"          CHART_OF_ACCT_ID as string,",
				"          CMPNY_CODE_ID as string,",
				"          COST_CNTR_ID as string,",
				"          COST_ELEM_ID as string,",
				"          CTRL_AREA_ID as string,",
				"          CTRL_KEY_SUB_NUMBER_ID as string,",
				"          CTRL_TRX_ID as string,",
				"          CURR_ID_CTRL_AREA as string,",
				"          CURR_ID_LOC as string,",
				"          CURR_ID_OBJ as string,",
				"          CURR_ID_TRX as string,",
				"          FISC_PERIOD as string,",
				"          FISC_YEAR as string,",
				"          FISC_YR_VARIANT_ID_CMPNY_CODE as string,",
				"          FISC_YR_VARIANT_ID_CTRL_AREA as string,",
				"          GL_ACCT_ID as string,",
				"          INTERNAL_ORDER_ID as string,",
				"          OBJ_CLASS_ID as string,",
				"          OBJ_ID as string,",
				"          OBJ_ID_ORIGINAL as string,",
				"          OBJ_ID_PARTNER as string,",
				"          OBJ_TYPE_ID as string,",
				"          PARTITION_YEAR as string,",
				"          PERIOD_BLOCK_CODE as string,",
				"          PROJ_ELEM_ID as string,",
				"          PROJ_ID as string,",
				"          RECORD_TYPE_ID as string,",
				"          TRADING_PARTNER_ID as string,",
				"          TRX_TYPE_ID as string,",
				"          UOM_ID as string,",
				"          VERSION_ID as string,",
				"          LOAD_DATE as string,",
				"          LOAD_TIME as string,",
				"          SOURCE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(FISC_YEAR==\"2021\",",
				"     disjoint: false) ~> split1@(FISCYEAR2021, FISCYEARREST)",
				"split1@FISCYEAR2021 select(mapColumn(",
				"          AMT_CTRL_AREA,",
				"          AMT_FIXED_CTRL_AREA,",
				"          AMT_FIXVAR_CTRL_AREA,",
				"          AMT_OBJ,",
				"          QTY,",
				"          DEB_CRED_IND,",
				"          CHART_OF_ACCT_ID,",
				"          COST_CNTR_ID,",
				"          COST_ELEM_ID,",
				"          CTRL_AREA_ID,",
				"          FISC_PERIOD,",
				"          FISC_YEAR,",
				"          GL_ACCT_ID,",
				"          LOAD_DATE,",
				"          LOAD_TIME,",
				"          SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@FISCYEARREST split(FISC_YEAR==\"2022\",",
				"     FISC_YEAR==\"2023\",",
				"     FISC_YEAR==\"2024\",",
				"     disjoint: false) ~> split2@(FISCYEAR2022, FISCYEAR2023, FISCYEAR2024, FISCYEAR2025)",
				"split2@FISCYEAR2022 select(mapColumn(",
				"          AMT_CTRL_AREA,",
				"          AMT_FIXED_CTRL_AREA,",
				"          AMT_FIXVAR_CTRL_AREA,",
				"          AMT_OBJ,",
				"          QTY,",
				"          DEB_CRED_IND,",
				"          CHART_OF_ACCT_ID,",
				"          COST_CNTR_ID,",
				"          COST_ELEM_ID,",
				"          CTRL_AREA_ID,",
				"          FISC_PERIOD,",
				"          FISC_YEAR,",
				"          GL_ACCT_ID,",
				"          LOAD_DATE,",
				"          LOAD_TIME,",
				"          SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split2@FISCYEAR2023 select(mapColumn(",
				"          AMT_CTRL_AREA,",
				"          AMT_FIXED_CTRL_AREA,",
				"          AMT_FIXVAR_CTRL_AREA,",
				"          AMT_OBJ,",
				"          QTY,",
				"          DEB_CRED_IND,",
				"          CHART_OF_ACCT_ID,",
				"          COST_CNTR_ID,",
				"          COST_ELEM_ID,",
				"          CTRL_AREA_ID,",
				"          FISC_PERIOD,",
				"          FISC_YEAR,",
				"          GL_ACCT_ID,",
				"          LOAD_DATE,",
				"          LOAD_TIME,",
				"          SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split2@FISCYEAR2024 select(mapColumn(",
				"          AMT_CTRL_AREA,",
				"          AMT_FIXED_CTRL_AREA,",
				"          AMT_FIXVAR_CTRL_AREA,",
				"          AMT_OBJ,",
				"          QTY,",
				"          DEB_CRED_IND,",
				"          CHART_OF_ACCT_ID,",
				"          COST_CNTR_ID,",
				"          COST_ELEM_ID,",
				"          CTRL_AREA_ID,",
				"          FISC_PERIOD,",
				"          FISC_YEAR,",
				"          GL_ACCT_ID,",
				"          LOAD_DATE,",
				"          LOAD_TIME,",
				"          SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"split2@FISCYEAR2025 select(mapColumn(",
				"          AMT_CTRL_AREA,",
				"          AMT_FIXED_CTRL_AREA,",
				"          AMT_FIXVAR_CTRL_AREA,",
				"          AMT_OBJ,",
				"          QTY,",
				"          DEB_CRED_IND,",
				"          CHART_OF_ACCT_ID,",
				"          COST_CNTR_ID,",
				"          COST_ELEM_ID,",
				"          CTRL_AREA_ID,",
				"          FISC_PERIOD,",
				"          FISC_YEAR,",
				"          GL_ACCT_ID,",
				"          LOAD_DATE,",
				"          LOAD_TIME,",
				"          SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id } as string,",
				"          {firstname } as string,",
				"          age as string,",
				"          profession as string,",
				"          city as string,",
				"          salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id } as string,",
				"          {firstname } as string,",
				"          age as string,",
				"          profession as string,",
				"          city as string,",
				"          salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id } as string,",
				"          {firstname } as string,",
				"          age as string,",
				"          profession as string,",
				"          city as string,",
				"          salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id } as string,",
				"          {firstname } as string,",
				"          age as string,",
				"          profession as string,",
				"          city as string,",
				"          salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id } as string,",
				"          {firstname } as string,",
				"          age as string,",
				"          profession as string,",
				"          city as string,",
				"          salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink5"
			]
		}
	}
}